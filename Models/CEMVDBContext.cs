// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace AppCEMV
{
    public partial class CEMVDBContext : DbContext
    {
        public CEMVDBContext()
        {
        }

        public CEMVDBContext(DbContextOptions<CEMVDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Animal> Animal { get; set; }
        public virtual DbSet<Apresentacao> Apresentacao { get; set; }
        public virtual DbSet<Clinica> Clinica { get; set; }
        public virtual DbSet<Clinicatelefone> Clinicatelefone { get; set; }
        public virtual DbSet<Comochegou> Comochegou { get; set; }
        public virtual DbSet<Concentracao> Concentracao { get; set; }
        public virtual DbSet<Cor> Cor { get; set; }
        public virtual DbSet<Especialidade> Especialidade { get; set; }
        public virtual DbSet<Especialidadeusuario> Especialidadeusuario { get; set; }
        public virtual DbSet<Especie> Especie { get; set; }
        public virtual DbSet<Estoque> Estoque { get; set; }
        public virtual DbSet<Fabricante> Fabricante { get; set; }
        public virtual DbSet<Funcionalidade> Funcionalidade { get; set; }
        public virtual DbSet<Funcionalidadeperfil> Funcionalidadeperfil { get; set; }
        public virtual DbSet<Funcionalidadeusuario> Funcionalidadeusuario { get; set; }
        public virtual DbSet<Perfil> Perfil { get; set; }
        public virtual DbSet<Principio> Principio { get; set; }
        public virtual DbSet<Produto> Produto { get; set; }
        public virtual DbSet<Produtopreco> Produtopreco { get; set; }
        public virtual DbSet<Profissao> Profissao { get; set; }
        public virtual DbSet<Raca> Raca { get; set; }
        public virtual DbSet<TabBairro> TabBairro { get; set; }
        public virtual DbSet<TabCidade> TabCidade { get; set; }
        public virtual DbSet<TabEstado> TabEstado { get; set; }
        public virtual DbSet<Tarefa> Tarefa { get; set; }
        public virtual DbSet<Tipoproduto> Tipoproduto { get; set; }
        public virtual DbSet<Tutor> Tutor { get; set; }
        public virtual DbSet<Tutortelefone> Tutortelefone { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Usuariotelefone> Usuariotelefone { get; set; }
        public virtual DbSet<Volume> Volume { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=NOTE-CRIS\\SQLEXPRESS;Initial Catalog=CEMVDB;User ID=sa;Password=sa");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Animal>(entity =>
            {
                entity.Property(e => e.Cci).IsUnicode(false);

                entity.Property(e => e.Chip).IsUnicode(false);

                entity.Property(e => e.Foto).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.Observacoes).IsUnicode(false);

                entity.Property(e => e.Pedigree).IsUnicode(false);

                entity.HasOne(d => d.Comochegou)
                    .WithMany(p => p.Animal)
                    .HasForeignKey(d => d.ComochegouId)
                    .HasConstraintName("FK_ANIMAL_COMOCHEGOU");

                entity.HasOne(d => d.Cor)
                    .WithMany(p => p.Animal)
                    .HasForeignKey(d => d.CorId)
                    .HasConstraintName("FK_ANIMAL_COR");

                entity.HasOne(d => d.Especie)
                    .WithMany(p => p.Animal)
                    .HasForeignKey(d => d.EspecieId)
                    .HasConstraintName("FK_ANIMAL_ESPECIE");

                entity.HasOne(d => d.Raca)
                    .WithMany(p => p.Animal)
                    .HasForeignKey(d => d.RacaId)
                    .HasConstraintName("FK_ANIMAL_RACA");

                entity.HasOne(d => d.Tutor)
                    .WithMany(p => p.Animal)
                    .HasForeignKey(d => d.TutorId)
                    .HasConstraintName("FK_ANIMAL_TUTOR");

                entity.HasOne(d => d.Usuariocadastro)
                    .WithMany(p => p.Animal)
                    .HasForeignKey(d => d.UsuariocadastroId)
                    .HasConstraintName("FK_ANIMAL_USUARIOCADASTRO");
            });

            modelBuilder.Entity<Apresentacao>(entity =>
            {
                entity.Property(e => e.ApresentacaoId).ValueGeneratedNever();

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<Clinica>(entity =>
            {
                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Cnpj).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Indicadorativo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Inscricaoestadual).IsUnicode(false);

                entity.Property(e => e.Inscricaomunicipal).IsUnicode(false);

                entity.Property(e => e.Logomarca).IsUnicode(false);

                entity.Property(e => e.Logradouro).IsUnicode(false);

                entity.Property(e => e.Nomefantasia).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Razaosocial).IsUnicode(false);

                entity.HasOne(d => d.Bairro)
                    .WithMany(p => p.Clinica)
                    .HasForeignKey(d => d.BairroId)
                    .HasConstraintName("FK_CLINICA_TAB_BAIRRO");

                entity.HasOne(d => d.Cidade)
                    .WithMany(p => p.Clinica)
                    .HasForeignKey(d => d.CidadeId)
                    .HasConstraintName("FK_CLINICA_TAB_CIDADE");

                entity.HasOne(d => d.Estado)
                    .WithMany(p => p.Clinica)
                    .HasForeignKey(d => d.EstadoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLINICA_TAB_ESTADO");
            });

            modelBuilder.Entity<Clinicatelefone>(entity =>
            {
                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Ramal).IsUnicode(false);

                entity.HasOne(d => d.Clinica)
                    .WithMany(p => p.Clinicatelefone)
                    .HasForeignKey(d => d.ClinicaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLINICATELEFONE_CLINICA");
            });

            modelBuilder.Entity<Comochegou>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<Concentracao>(entity =>
            {
                entity.Property(e => e.ConcentracaoId).ValueGeneratedNever();

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<Cor>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<Especialidade>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.HasOne(d => d.Profissao)
                    .WithMany(p => p.Especialidade)
                    .HasForeignKey(d => d.ProfissaoId)
                    .HasConstraintName("FK_ESPECIALIDADE_PROFISSAO");
            });

            modelBuilder.Entity<Especialidadeusuario>(entity =>
            {
                entity.HasOne(d => d.Especialidade)
                    .WithMany(p => p.Especialidadeusuario)
                    .HasForeignKey(d => d.EspecialidadeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ESPECUSUARIO_ESPECIALIDADE");

                entity.HasOne(d => d.Usuario)
                    .WithMany(p => p.Especialidadeusuario)
                    .HasForeignKey(d => d.UsuarioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ESPECUSUARIO_USUARIO");
            });

            modelBuilder.Entity<Especie>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.TipoespecieId).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Estoque>(entity =>
            {
                entity.Property(e => e.EstoqueId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Fabricante>(entity =>
            {
                entity.Property(e => e.FabricanteId).ValueGeneratedNever();

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<Funcionalidade>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Itemmenu).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<Funcionalidadeperfil>(entity =>
            {
                entity.HasOne(d => d.Funcionalidade)
                    .WithMany(p => p.Funcionalidadeperfil)
                    .HasForeignKey(d => d.FuncionalidadeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FUNCPERFIL_FUNCIONALIDADE");

                entity.HasOne(d => d.Perfil)
                    .WithMany(p => p.Funcionalidadeperfil)
                    .HasForeignKey(d => d.PerfilId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FUNCPERFIL_PERFIL");
            });

            modelBuilder.Entity<Funcionalidadeusuario>(entity =>
            {
                entity.Property(e => e.FuncionalidadeusuarioId).ValueGeneratedNever();

                entity.HasOne(d => d.Funcionalidade)
                    .WithMany(p => p.Funcionalidadeusuario)
                    .HasForeignKey(d => d.FuncionalidadeId)
                    .HasConstraintName("FK_FUNCUSUARIO_FUNCIONALIDADE");

                entity.HasOne(d => d.Usuario)
                    .WithMany(p => p.Funcionalidadeusuario)
                    .HasForeignKey(d => d.UsuarioId)
                    .HasConstraintName("FK_FUNCUSUARIO_USUARIO");
            });

            modelBuilder.Entity<Perfil>(entity =>
            {
                entity.Property(e => e.PerfilId).ValueGeneratedNever();

                entity.Property(e => e.Nome).IsUnicode(false);
            });

            modelBuilder.Entity<Principio>(entity =>
            {
                entity.Property(e => e.PrincipioId).ValueGeneratedNever();

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<Produto>(entity =>
            {
                entity.Property(e => e.ProdutoId).ValueGeneratedNever();

                entity.Property(e => e.Codigobarras).IsUnicode(false);

                entity.Property(e => e.Foto).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.HasOne(d => d.Apresentacao)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.ApresentacaoId)
                    .HasConstraintName("FK_PRODUTO_APRESENTACAO");

                entity.HasOne(d => d.Concentracao)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.ConcentracaoId)
                    .HasConstraintName("FK_PRODUTO_CONCENTRACAO");

                entity.HasOne(d => d.Estoque)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.EstoqueId)
                    .HasConstraintName("FK_PRODUTO_ESTOQUE");

                entity.HasOne(d => d.Fabricante)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.FabricanteId)
                    .HasConstraintName("FK_PRODUTO_FABRICANTE");

                entity.HasOne(d => d.Principio)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.PrincipioId)
                    .HasConstraintName("FK_PRODUTO_PRINCIPIO");

                entity.HasOne(d => d.Tipoproduto)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.TipoprodutoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PRODUTO_TIPOPRODUTO");

                entity.HasOne(d => d.Volume)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.VolumeId)
                    .HasConstraintName("FK_PRODUTO_VOLUME");
            });

            modelBuilder.Entity<Produtopreco>(entity =>
            {
                entity.Property(e => e.ProdutoprecoId).ValueGeneratedNever();

                entity.HasOne(d => d.Produto)
                    .WithMany(p => p.Produtopreco)
                    .HasForeignKey(d => d.ProdutoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PRODUTOPRECO_PRODUTO");
            });

            modelBuilder.Entity<Profissao>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<Raca>(entity =>
            {
                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.HasOne(d => d.Especie)
                    .WithMany(p => p.Raca)
                    .HasForeignKey(d => d.EspecieId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RACA_ESPECIE");
            });

            modelBuilder.Entity<TabBairro>(entity =>
            {
                entity.Property(e => e.BairroId).ValueGeneratedNever();

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.HasOne(d => d.Cidade)
                    .WithMany(p => p.TabBairro)
                    .HasForeignKey(d => d.CidadeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TAB_BAIRO_TAB_CIDADE");
            });

            modelBuilder.Entity<TabCidade>(entity =>
            {
                entity.Property(e => e.CidadeId).ValueGeneratedNever();

                entity.Property(e => e.Dddpadrao).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.HasOne(d => d.Estado)
                    .WithMany(p => p.TabCidade)
                    .HasForeignKey(d => d.EstadoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TAB_CIDADE_TAB_ESTADO");
            });

            modelBuilder.Entity<TabEstado>(entity =>
            {
                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.Sigla).IsUnicode(false);
            });

            modelBuilder.Entity<Tarefa>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Executor).IsUnicode(false);

                entity.Property(e => e.Finalizado)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Iniciado)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Tipoproduto>(entity =>
            {
                entity.Property(e => e.TipoprodutoId).ValueGeneratedNever();

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            modelBuilder.Entity<Tutor>(entity =>
            {
                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Logradouro).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.Nrodocumento).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Observacoes).IsUnicode(false);

                entity.Property(e => e.Profissao).IsUnicode(false);

                entity.HasOne(d => d.Bairro)
                    .WithMany(p => p.Tutor)
                    .HasForeignKey(d => d.BairroId)
                    .HasConstraintName("FK_TUTOR_TAB_BAIRRO");

                entity.HasOne(d => d.Cidade)
                    .WithMany(p => p.Tutor)
                    .HasForeignKey(d => d.CidadeId)
                    .HasConstraintName("FK_TUTOR_TAB_CIDADE");

                entity.HasOne(d => d.Clinica)
                    .WithMany(p => p.Tutor)
                    .HasForeignKey(d => d.ClinicaId)
                    .HasConstraintName("FK_TUTOR_CLINICA");

                entity.HasOne(d => d.Comochegou)
                    .WithMany(p => p.Tutor)
                    .HasForeignKey(d => d.ComochegouId)
                    .HasConstraintName("FK_TUTOR_COMOCHEGOU");

                entity.HasOne(d => d.Estado)
                    .WithMany(p => p.Tutor)
                    .HasForeignKey(d => d.EstadoId)
                    .HasConstraintName("FK_TUTOR_TAB_ESTADO");

                entity.HasOne(d => d.ProfissaoNavigation)
                    .WithMany(p => p.Tutor)
                    .HasForeignKey(d => d.ProfissaoId)
                    .HasConstraintName("FK_TUTOR_PROFISSAO");

                entity.HasOne(d => d.Usuariocadastro)
                    .WithMany(p => p.TutorUsuariocadastro)
                    .HasForeignKey(d => d.UsuariocadastroId)
                    .HasConstraintName("FK_TUTOR_USUARIOCADASTRO");

                entity.HasOne(d => d.Usuariopreferencia)
                    .WithMany(p => p.TutorUsuariopreferencia)
                    .HasForeignKey(d => d.UsuariopreferenciaId)
                    .HasConstraintName("FK_TUTOR_USUARIOPREFERENCIA");
            });

            modelBuilder.Entity<Tutortelefone>(entity =>
            {
                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Ramal).IsUnicode(false);

                entity.HasOne(d => d.Tutor)
                    .WithMany(p => p.Tutortelefone)
                    .HasForeignKey(d => d.TutorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUTORTELEFONE_TUTOR");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.Property(e => e.Cep).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.Cpf).IsUnicode(false);

                entity.Property(e => e.Crmv).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Foto).IsUnicode(false);

                entity.Property(e => e.Logradouro).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.HasOne(d => d.Bairro)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.BairroId)
                    .HasConstraintName("FK_USUARIO_TAB_BAIRRO");

                entity.HasOne(d => d.Cidade)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.CidadeId)
                    .HasConstraintName("FK_USUARIO_TAB_CIDADE");

                entity.HasOne(d => d.Clinica)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.ClinicaId)
                    .HasConstraintName("FK_USUARIO_CLINICA");

                entity.HasOne(d => d.Estado)
                    .WithMany(p => p.UsuarioEstado)
                    .HasForeignKey(d => d.EstadoId)
                    .HasConstraintName("FK_USUARIO_TAB_ESTADO");

                entity.HasOne(d => d.Estadocrmv)
                    .WithMany(p => p.UsuarioEstadocrmv)
                    .HasForeignKey(d => d.EstadocrmvId)
                    .HasConstraintName("FK_USUARIO_TAB_ESTADOCRMV");

                entity.HasOne(d => d.Perfil)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.PerfilId)
                    .HasConstraintName("FK_USUARIO_PERFIL");

                entity.HasOne(d => d.Profissao)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.ProfissaoId)
                    .HasConstraintName("FK_USUARIO_PROFISSAO");
            });

            modelBuilder.Entity<Usuariotelefone>(entity =>
            {
                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Ramal).IsUnicode(false);

                entity.HasOne(d => d.Usuario)
                    .WithMany(p => p.Usuariotelefone)
                    .HasForeignKey(d => d.UsuarioId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_USUARIOTELEFONE_USUARIO");
            });

            modelBuilder.Entity<Volume>(entity =>
            {
                entity.Property(e => e.VolumeId).ValueGeneratedNever();

                entity.Property(e => e.Descricao).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}